#LyX 2.2 created this file. For more info see http://www.lyx.org/
\lyxformat 508
\begin_document
\begin_header
\save_transient_properties true
\origin unavailable
\textclass article
\begin_preamble
\usepackage{microtype}
\end_preamble
\use_default_options true
\begin_modules
theorems-ams
theorems-ams-extended
\end_modules
\maintain_unincluded_children false
\language english
\language_package default
\inputencoding auto
\fontencoding global
\font_roman "default" "default"
\font_sans "default" "default"
\font_typewriter "default" "default"
\font_math "auto" "auto"
\font_default_family default
\use_non_tex_fonts false
\font_sc false
\font_osf false
\font_sf_scale 100 100
\font_tt_scale 100 100
\graphics default
\default_output_format default
\output_sync 0
\bibtex_command default
\index_command default
\paperfontsize default
\spacing single
\use_hyperref false
\papersize default
\use_geometry false
\use_package amsmath 1
\use_package amssymb 1
\use_package cancel 1
\use_package esint 1
\use_package mathdots 1
\use_package mathtools 1
\use_package mhchem 1
\use_package stackrel 1
\use_package stmaryrd 1
\use_package undertilde 1
\cite_engine basic
\cite_engine_type default
\biblio_style plain
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date false
\justification true
\use_refstyle 1
\index Index
\shortcut idx
\color #008000
\end_index
\leftmargin 2.5cm
\topmargin 2.5cm
\rightmargin 2.5cm
\bottommargin 2.5cm
\secnumdepth 3
\tocdepth 3
\paragraph_separation skip
\defskip bigskip
\quotes_language english
\papercolumns 1
\papersides 1
\paperpagestyle default
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Title
Free theorems, fast: an overview of parametricity
\end_layout

\begin_layout Date
July 3, 2017
\end_layout

\begin_layout Standard

\emph on
These notes were taken from a talk by Paul Downen during an OPLSS '17 hands-on
 session.
 Any errors in transcription or in presentation are mine, not Paul's.
 
\color red
Details that I don't understand myself are highlighted in red.
 I hope you'll be able to furnish the details.
\end_layout

\begin_layout Standard
The property making parametricity possible in a language is a 
\begin_inset Quotes eld
\end_inset

semantic correctness
\begin_inset Quotes erd
\end_inset

 property called 
\emph on
adequacy
\emph default
, linking terms of a type to the type's set of 
\begin_inset Quotes eld
\end_inset

semantically correct
\begin_inset Quotes erd
\end_inset

 terms.
 We show this adequacy property for both STLC and System F.
 We then show how applying the adequacy theorem for System F gives us the
 famous 
\begin_inset Quotes eld
\end_inset

free theorems
\begin_inset Quotes erd
\end_inset

 constraining terms of a type.
 This reasoning that constrains terms of a type is what we call parametricity.
\end_layout

\begin_layout Standard
(You have may have also heard of 
\begin_inset Quotes eld
\end_inset

logical relations
\begin_inset Quotes erd
\end_inset

, a method of stating properties in progamming languages.
 The idea behind 
\emph on
logical relations
\emph default
 is to define a property desired of a language, by induction over the structure
 of types.)
\end_layout

\begin_layout Section
Adequacy in the simply-typed 
\begin_inset Formula $\lambda$
\end_inset

 calculus
\end_layout

\begin_layout Standard
Before we define 
\begin_inset Quotes eld
\end_inset

adequacy
\begin_inset Quotes erd
\end_inset

 for System F, we'll first need a utility definition.
\end_layout

\begin_layout Definition
The 
\emph on
expansion of a set of terms 
\begin_inset Formula $\mathbb{C}$
\end_inset


\emph default
, or 
\begin_inset Formula $\mathbf{Exp}\,\mathbb{C}$
\end_inset

, is the set's closure under reverse reduction.
 In other words, 
\begin_inset Formula $N\in\mathbf{Exp\,}\mathbb{C}$
\end_inset

 if there exists an 
\begin_inset Formula $M\in\mathbb{C}$
\end_inset

 such that 
\begin_inset Formula $N\mapsto^{*}M$
\end_inset

.
 
\end_layout

\begin_layout Standard
Perhaps the only real motivation of 
\begin_inset Formula $\mathbf{Exp}\mathbb{\,C}$
\end_inset

, as Dan put it, is to give us more hypotheses to push our proofs through.
\end_layout

\begin_layout Standard
Next, we define the 
\begin_inset Quotes eld
\end_inset

interpretation brackets
\begin_inset Quotes erd
\end_inset

 that map a particular type to its set of 
\begin_inset Quotes eld
\end_inset

semantically correct
\begin_inset Quotes erd
\end_inset

 terms.
 This is an example of a 
\emph on
logical relation
\emph default
, defined inductively on the sructure of types.
\end_layout

\begin_layout Definition
\begin_inset Formula $\llbracket\_\rrbracket$
\end_inset

 mapping an STLC type to a set of terms.
\end_layout

\begin_deeper
\begin_layout Enumerate
\begin_inset Formula $\llbracket A\to B\rrbracket=\{M\in Term\;|\;\forall N\in\llbracket A\rrbracket,MN\in\llbracket B\rrbracket\}$
\end_inset


\end_layout

\begin_layout Enumerate
\begin_inset Formula $\llbracket A\times B\rrbracket=\{M\in Term\:|\:fst\,M\in\llbracket A\rrbracket,snd\,M\in\llbracket B\rrbracket\}$
\end_inset


\end_layout

\begin_deeper
\begin_layout Standard
The above two definitions are considered 
\begin_inset Quotes eld
\end_inset

negative
\begin_inset Quotes erd
\end_inset

, since they are defined in terms of eliminators.
 Conversely, the following two definitions are considered 
\begin_inset Quotes eld
\end_inset

positive
\begin_inset Quotes erd
\end_inset

, since they they are defined in terms of introductory forms.
\end_layout

\end_deeper
\begin_layout Enumerate
\begin_inset Formula $\llbracket A+B\rrbracket=\mathbf{Exp}\{inl\;M\,|\,M\in\llbracket A\rrbracket\}\cup\mathbf{Exp}\{inr\,M\:|\:M\in\llbracket B\rrbracket\}$
\end_inset


\end_layout

\begin_layout Enumerate
(For fun.) 
\begin_inset Formula $\llbracket\mathrm{Bool}\rrbracket=\mathbf{Exp}\{\mathrm{\mathbf{true},\mathrm{\mathbf{false}\}}}$
\end_inset


\end_layout

\end_deeper
\begin_layout Note*
A few choices taken by this definition are worth commenting on.
\end_layout

\begin_deeper
\begin_layout Enumerate
Note that we do not define 
\begin_inset Formula $\llbracket\_\rrbracket$
\end_inset

 using the typing relation.
 This becomes more useful in System F, when we want to deal with variables
 bound by 
\begin_inset Formula $\forall$
\end_inset

 , without having to carry around typing contexts.
\end_layout

\begin_layout Enumerate
Why does the definition above switch between negative and positive definitions
 for different types? Observe what happens if we try to define 
\begin_inset Formula $\llbracket A+B\rrbracket$
\end_inset

 in positive style, and then use this case in a proof by induction.
 The eliminator for booleans is given by the typing rule
\end_layout

\begin_deeper
\begin_layout Standard
\begin_inset Formula 
\[
\frac{\Gamma\vdash b:\mathrm{Bool}\quad\Gamma\vdash c:C\quad\Gamma\vdash d:C}{\Gamma\vdash\mathbf{if}\,b\,\mathbf{then}\,c\,\mathbf{else}\,d:C}
\]

\end_inset

The corresponding 
\begin_inset Quotes eld
\end_inset

positive
\begin_inset Quotes erd
\end_inset

 definition of 
\begin_inset Formula $\llbracket\mathrm{Bool}\rrbracket$
\end_inset

 is then:
\begin_inset Formula 
\[
\llbracket\mathrm{Bool}\rrbracket=\{M\in Term\mathbf{\:|\:\exists\mathrm{\,C\,a\,type\:st.}\:if}\,M\,\mathbf{then}\,c\,\mathbf{else}\,d\in\llbracket C\rrbracket\}
\]

\end_inset


\end_layout

\begin_layout Standard
Now try to use 
\begin_inset Formula $\llbracket\mathrm{Bool}\rrbracket$
\end_inset

 in a proof by induction.
 In the case where 
\begin_inset Formula $M\in\llbracket\mathrm{Bool}\rrbracket$
\end_inset

, the inductive hypothesis would give us information about some type 
\begin_inset Formula $\llbracket C\rrbracket$
\end_inset

 that has no connection to 
\begin_inset Formula $\llbracket\mathrm{Bool}\rrbracket$
\end_inset

! A similar problem happens with sum types.
 Put briefly, the eliminators of both sum types and booleans are hypothesised
 on types that aren't part of the sum or boolean type.
 
\end_layout

\end_deeper
\end_deeper
\begin_layout Standard
We can now define the adequacy property itself, connecting types to sets
 of semantic interpretations.
 This is a major theorem that we state for its applications, rather than
 its proof.
\end_layout

\begin_layout Theorem

\emph on
(Adequacy of STLC.)
\emph default
 If 
\begin_inset Formula $\vdash M:A$
\end_inset

, then 
\begin_inset Formula $M\in\llbracket A\rrbracket$
\end_inset

.
\end_layout

\begin_layout Standard
For concreteness, here is the adequacy theorem specialised on boolean terms.
 This gives us a hint of how adequacy constrains the terms of a type.
\end_layout

\begin_layout Corollary*
\begin_inset Formula $\vdash M\in\mathrm{Bool}$
\end_inset

 implies 
\begin_inset Formula $M\in\mathrm{Exp\{\mathrm{\mathbf{true},\mathrm{\mathbf{false}\}}}}$
\end_inset

.
 Equivalently, 
\begin_inset Formula $\vdash M\in\mathrm{Bool}$
\end_inset

 implies 
\begin_inset Formula $M\mathrm{\mapsto^{*}\mathbf{true}}$
\end_inset

 or 
\begin_inset Formula $M\mapsto^{*}\mathrm{\mathrm{\mathrm{\mathbf{false}}}}$
\end_inset

.
\end_layout

\begin_layout Standard
As another example, here is a fact about 
\begin_inset Formula $\llbracket A\to B\rrbracket$
\end_inset

 .
 The following (partial) proof shows us how the inductive nature of 
\begin_inset Formula $\llbracket\_\rrbracket$
\end_inset

 (and logical relations in general) works well with proofs by induction.
 
\end_layout

\begin_layout Fact

\color black
For all types 
\begin_inset Formula $A$
\end_inset

, 
\begin_inset Formula $\llbracket A\rrbracket$
\end_inset

 is closed under expansion with call-by-value evaluation
\begin_inset Foot
status open

\begin_layout Plain Layout
This property also holds for call-by-name evaluation.
 We assume call-by-value evaluation here in order to simplify the proof:
 given a term 
\begin_inset Formula $M$
\end_inset

, we must construct an 
\begin_inset Formula $M^{\prime}$
\end_inset

 and show that 
\begin_inset Formula $M^{\prime}\mapsto^{*}M$
\end_inset

.
 The reduction can be done in one step if call-by-value is assumed.
\end_layout

\end_inset

.
 Equivalently, 
\begin_inset Formula $\llbracket A\rrbracket=\mathbf{Exp}\llbracket A\rrbracket$
\end_inset

.
\end_layout

\begin_layout Proof
(Partial.
 We present a single case for each of the positive and negative cases of
 
\begin_inset Formula $\llbracket\_\rrbracket$
\end_inset

 respectively.) Let 
\begin_inset Formula $A$
\end_inset

 be an arbitrary type.
 Proceed by induction on 
\begin_inset Formula $A$
\end_inset

.
\end_layout

\begin_deeper
\begin_layout Case
(
\begin_inset Formula $A$
\end_inset

 an arrow type 
\begin_inset Formula $A\to B$
\end_inset

.) Let 
\begin_inset Formula $M\in\llbracket A\to B\rrbracket$
\end_inset

, and introduce 
\begin_inset Formula $M^{\prime}$
\end_inset

 st.
 
\begin_inset Formula $M^{\prime}\to^{*}M.$
\end_inset

 We wish to show that 
\begin_inset Formula $M^{\prime}\in\llbracket A\to B\rrbracket$
\end_inset

 - i.e., for all 
\begin_inset Formula $N\in\llbracket A\rrbracket$
\end_inset

, we have 
\begin_inset Formula $M^{\prime}\,N\in\llbracket B\rrbracket$
\end_inset

.
 So let 
\begin_inset Formula $N\in\llbracket A\rrbracket$
\end_inset

.
 
\end_layout

\begin_deeper
\begin_layout Standard
Reduction rules apply to show that 
\begin_inset Formula 
\[
\frac{M^{\prime}\mapsto M}{M^{\prime}\,N\mapsto M\,N}
\]

\end_inset


\end_layout

\begin_layout Standard
i.e.
 that 
\begin_inset Formula $M\,N\mapsto M^{\prime}\,N$
\end_inset

.
 
\end_layout

\begin_layout Standard
At the same time, since 
\begin_inset Formula $M\in\llbracket A\to B\rrbracket$
\end_inset

, we see 
\begin_inset Formula $M\,N\in\llbracket B\rrbracket$
\end_inset

 .
\end_layout

\begin_layout Standard
Finally, since 
\begin_inset Formula $\llbracket B\rrbracket$
\end_inset

 is closed under expansion by the inductive hypothesis, both 
\begin_inset Formula $M\,N\mapsto M^{\prime}\,N$
\end_inset

 and 
\begin_inset Formula $M\,N\in\llbracket B\rrbracket$
\end_inset

 together imply 
\begin_inset Formula $M^{\prime}\,N\in\llbracket B\rrbracket$
\end_inset

.
 This suffices to show that, by the definition of 
\begin_inset Formula $\llbracket A\to B\rrbracket,$
\end_inset

 
\begin_inset Formula $M^{\prime}\in\llbracket A\to B\rrbracket.$
\end_inset


\end_layout

\end_deeper
\begin_layout Case
(
\begin_inset Formula $A$
\end_inset

 a sum type 
\begin_inset Formula $A+B$
\end_inset

.) Let 
\begin_inset Formula $M\in\llbracket A+B\rrbracket$
\end_inset

.
 In this case, we wish to show the existence of a term 
\begin_inset Formula $M^{\prime}$
\end_inset

 st.
 both 
\begin_inset Formula $M^{\prime}\mapsto^{*}M$
\end_inset

, and either
\end_layout

\begin_deeper
\begin_layout Enumerate
There exists an 
\begin_inset Formula $M_{1}^{\prime}\in\llbracket A\rrbracket$
\end_inset

 st.
 
\begin_inset Formula $\mathbf{inl}\,M_{1}^{\prime}$
\end_inset

, or
\end_layout

\begin_layout Enumerate
There exists an 
\begin_inset Formula $M_{2}^{\prime}\in\llbracket B\rrbracket$
\end_inset

 st.
 
\begin_inset Formula $\mathbf{inl}\,M_{2}^{\prime}$
\end_inset

.
\end_layout

\begin_layout Standard
The assumption that 
\begin_inset Formula $M\in\llbracket A+B\rrbracket$
\end_inset

 gives two cases on the form of 
\begin_inset Formula $M$
\end_inset

.
\end_layout

\begin_layout Standard
First, assume that 
\begin_inset Formula $M$
\end_inset

 has the form 
\begin_inset Formula $\mathbf{inl}\,M_{1}$
\end_inset

 , where 
\begin_inset Formula $M_{1}\in\llbracket A\rrbracket$
\end_inset

.
 By the induction hypothesis, there exists an 
\begin_inset Formula $M_{1}^{\prime}$
\end_inset

 
\begin_inset Formula $\in\llbracket A\rrbracket$
\end_inset

 with 
\begin_inset Formula $M_{1}^{\prime}\mapsto^{*}M_{1}$
\end_inset

.
 So set 
\begin_inset Formula $M^{\prime}=\mathbf{inl}\,M_{1}^{\prime}$
\end_inset

: we are required to show property 1.
 holds.
 We now show that 
\begin_inset Formula $M^{\prime}\mapsto M$
\end_inset

.
 Since we have assumed call-by-value evaluation, reduction rules apply to
 show that 
\begin_inset Formula 
\[
\frac{M_{1}^{\prime}\mapsto M_{1}}{\mathbf{inl\,}M_{1}^{\prime}\mapsto\mathbf{inl\,}M_{1}}
\]

\end_inset


\end_layout

\begin_layout Standard
and so 
\begin_inset Formula $M^{\prime}\mapsto M$
\end_inset

.
\end_layout

\begin_layout Standard
Finally, we show that 
\begin_inset Formula $M^{\prime}\in\llbracket A+B\rrbracket$
\end_inset

: since 
\begin_inset Formula $\mathbf{fst}\,M=M_{1}^{\prime}\in\llbracket A\rrbracket$
\end_inset

, the conclusion 
\begin_inset Formula $M^{\prime}\in\llbracket A+B\rrbracket$
\end_inset

 follows by the definition of 
\begin_inset Formula $\llbracket A+B\rrbracket.$
\end_inset

 So we have shown property 1.
 holds, and the case is done.
\end_layout

\begin_layout Standard
The second case requires us to assume that 
\begin_inset Formula $M$
\end_inset

 now has the form 
\begin_inset Formula $\mathbf{inr\,}M_{1}$
\end_inset

, where 
\begin_inset Formula $M_{1}\in A$
\end_inset

.
 Similar reasoning allows us to give an 
\begin_inset Formula $M^{\prime}\mapsto^{*}M$
\end_inset

 satisfying property 2.
\end_layout

\end_deeper
\end_deeper
\begin_layout Section
Adequacy in System F
\end_layout

\begin_layout Standard
The extension of the adequacy property to System F requires a few more utility
 definitions.
 First, we will have much use for unary predicates on terms that are closed
 under reduction.
 We call these 
\emph on
reducibility candidates 
\emph default
(without motivating the name.)
\end_layout

\begin_layout Definition
(Reducibility candidates.)
\end_layout

\begin_deeper
\begin_layout Enumerate
A 
\emph on
reducibility candidate 
\begin_inset Formula $\mathbb{\mathbf{C}}$
\end_inset

 
\emph default
is a a set of terms closed under reverse reduction.
 So reducibility candidates are unary predicates on terms.
 (Interestingly, note that since 
\begin_inset Formula $\llbracket A\rrbracket$
\end_inset

 itself is closed under reverse reduction, 
\begin_inset Formula $\llbracket A\rrbracket$
\end_inset

 itself is a reducibility candidate.)
\end_layout

\begin_layout Enumerate
\begin_inset Formula $\mathrm{\mathbf{C\mathbb{R}}}$
\end_inset

 is the set of all reducibility candidates.
 The term is an abbreviation of Girard's original French.
\end_layout

\end_deeper
\begin_layout Standard
Second, we will need maps from type variables to reducibility candidates.
\end_layout

\begin_layout Definition
We use 
\begin_inset Formula $\theta[x]$
\end_inset

 as the mapping from the type variable 
\begin_inset Formula $x$
\end_inset

 to a reducibility candidate.
 Further, the notation 
\begin_inset Formula $\mathbb{\mathbf{C}}/x,\theta$
\end_inset

 indicates an extension of the map 
\begin_inset Formula $\theta$
\end_inset

 with 
\begin_inset Formula $x$
\end_inset

 now mapping to 
\begin_inset Formula $\mathbf{C}$
\end_inset

, a reducibility candidate.
\end_layout

\begin_layout Standard
We can now define the semantic interpretation of types in System F, before
 stating adequacy itself for System F.
\end_layout

\begin_layout Definition
\begin_inset Formula $\llbracket\_\rrbracket_{\theta}$
\end_inset

 mapping a type to a set of terms, where 
\begin_inset Formula $\theta$
\end_inset

 is a map from type variables to reducibility candidates.
\end_layout

\begin_deeper
\begin_layout Enumerate
\begin_inset Formula $\llbracket A\to B\rrbracket_{\theta}$
\end_inset

, 
\begin_inset Formula $\llbracket A\times B\rrbracket_{\theta}$
\end_inset

 , and 
\begin_inset Formula $\llbracket A+B\rrbracket_{\theta}$
\end_inset

 are defined as for STLC.
\end_layout

\begin_layout Enumerate
\begin_inset Formula $\llbracket\forall X.A\rrbracket=\{M\,|\,\forall B\,a\,type,\;\forall\mathbf{C\in\mathrm{\mathbf{C\mathbb{R}}}},\;M\,[B]\in\llbracket A\rrbracket_{\mathbf{C}/X,\theta}\}$
\end_inset

.
 (Here, 
\begin_inset Formula $M\,[B]$
\end_inset

 is the application of the polymorphic type abstraction 
\begin_inset Formula $M$
\end_inset

 to the type 
\begin_inset Formula $B$
\end_inset

.)
\end_layout

\begin_layout Enumerate
(For fun.) 
\begin_inset Formula $\llbracket\exists X.A\rrbracket=\mathbf{Exp}\{(B,M)\,|\,\exists\mathbb{C}\in\mathbf{C}\mathbb{R},\;M\in\llbracket A\rrbracket_{\mathbb{\mathbf{C}}/X,\theta}\}$
\end_inset


\end_layout

\begin_layout Enumerate
\begin_inset Formula $\llbracket X\,a\,free\,type\,variable\rrbracket=\theta[X]$
\end_inset

, where 
\begin_inset Formula $\theta$
\end_inset

 is map defined at 
\begin_inset Formula $X$
\end_inset

.
\end_layout

\end_deeper
\begin_layout Standard
We showed in the STLC that, for any type 
\begin_inset Formula $A$
\end_inset

, the set 
\begin_inset Formula $\llbracket A\rrbracket$
\end_inset

 was closed under reverse evaluation - hence, a reducibility candidate.
 This is also true of 
\begin_inset Formula $\llbracket\_\rrbracket_{\theta}$
\end_inset

 in System F.
 
\color red
This property is considerably more useful in System F, since it is used
 to show adequacy of System F.
\end_layout

\begin_layout Fact

\color black
For all types 
\begin_inset Formula $A$
\end_inset

, 
\begin_inset Formula $\llbracket A\rrbracket_{\theta}$
\end_inset

 is closed under expansion, 
\color inherit
where 
\begin_inset Formula $\theta$
\end_inset

 is an empty mapping from type variables to reducibility candidates
\color black
.
 Equivalently, 
\begin_inset Formula $\llbracket A\rrbracket_{\theta}=\mathbf{Exp}\llbracket A\rrbracket_{\theta}$
\end_inset

; equivalently, 
\begin_inset Formula $\llbracket A\rrbracket$
\end_inset

 is a reducibility candidate.
\end_layout

\begin_layout Standard
The adequacy property for System F is then as follows:
\end_layout

\begin_layout Theorem

\emph on
(Adequacy of System F.) 
\emph default
If 
\begin_inset Formula $\vdash M:A$
\end_inset

, then 
\begin_inset Formula $M\in\llbracket A\rrbracket_{\theta}$
\end_inset

, where 
\begin_inset Formula $\theta$
\end_inset

 is an empty mapping from type variables to reducibility candidates.
\end_layout

\begin_layout Section
Free theorems as applications of System F's adequacy
\end_layout

\begin_layout Standard
Parametricity is the use of System F's adequacy property to constrain the
 types that can inhabit a term.
 In particular, when the adequacy property is stated for a specific term
 and with specific reducibility candidates, we get what are called 
\begin_inset Quotes eld
\end_inset

free theorems
\begin_inset Quotes erd
\end_inset

 on terms.
 The following fact, for example, uses the adequacy property on terms of
 types 
\begin_inset Formula $\forall X.X\to X$
\end_inset

.
\end_layout

\begin_layout Theorem

\emph on
If
\emph default
 
\begin_inset Formula $\vdash M:\forall X.X\to X$
\end_inset

, then 
\begin_inset Formula $M=_{\beta\eta}\Lambda X.\lambda(x:X).x$
\end_inset

.
 
\emph on
In other words, there is exactly one term with the type of polymorphic 
\emph default
id
\emph on
, up to 
\begin_inset Formula $\beta$
\end_inset

 and 
\begin_inset Formula $\eta$
\end_inset

.
\end_layout

\begin_layout Proof
(This proof is quite mechanical: therefore, we italicise non-trivial steps
 that don't arise from just the definition of adequacy.) Expanding the definition
s of adequacy and of 
\begin_inset Formula $\llbracket\_\rrbracket_{\theta}$
\end_inset

 on 
\begin_inset Formula $\Lambda$
\end_inset

 and 
\begin_inset Formula $\to$
\end_inset

, we get the following: for all types 
\begin_inset Formula $A$
\end_inset

, reducibility candidates 
\begin_inset Formula $\mathbf{C},$
\end_inset

 and terms 
\begin_inset Formula $x$
\end_inset

, we have
\emph on
 
\begin_inset Formula $M\,[A]\,x\in\llbracket x\rrbracket_{\mathbf{C}/X,\theta}$
\end_inset

.
 So set 
\begin_inset Formula $\mathbf{C}$
\end_inset

 to 
\begin_inset Formula $\mathbf{Exp}\{x\}$
\end_inset


\emph default
.
 
\emph on
(This is
\emph default
 
\emph on
why we don't define 
\emph default

\begin_inset Formula $\llbracket\_\rrbracket_{\theta}$
\end_inset


\emph on
 in terms of the typing relation.) 
\emph default
Then, by the definition of 
\begin_inset Formula $\llbracket\_\rrbracket_{\theta}$
\end_inset

 on type variables,
\emph on
 
\begin_inset Formula $M\,[A]\,x\in\mathbf{Exp}\{x\}$
\end_inset

.

\emph default
 
\emph on
This is sufficient to show the desired 
\begin_inset Formula $\beta$
\end_inset

 and 
\begin_inset Formula $\eta$
\end_inset

 equivalence:
\end_layout

\begin_layout Proof
\begin_inset Formula 
\begin{eqnarray*}
M & =_{\eta} & \Lambda X.M\,[X]\\
 & =_{\eta} & \Lambda X.\lambda(x:X).M\,[X]\,x\\
 & =_{\beta} & \Lambda X.\lambda(x:X).x
\end{eqnarray*}

\end_inset


\end_layout

\begin_layout Proof

\emph on
\color red
where the last step follows by the assumption that 
\emph default

\begin_inset Formula $\text{M\,[A]\,x\,\in\mathbf{Exp}\{x\}}$
\end_inset

.
\end_layout

\end_body
\end_document
